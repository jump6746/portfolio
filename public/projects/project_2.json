{
  "items": {
    "title": "HoneyKeep",
    "projectTerm": "2025.02 ~ 2025.04",
    "members": 6,
    "membersRole": "FE 1명, BE/Infra 1명, BE/AI 1명, BE/FE 3명",
    "myRole": "프로젝트 팀장, FE 리더",
    "discription": "SSAFY 내에서 자산을 미리 소분해서 계획적인 소비 습관을 만들게 도와주는 자산관리 핀테크 서비스를 모의로 만들어봤습니다.",
    "github": "https://github.com/SSAFY-Specialized-Project/HoneyKeep",
    "skills": [
      "React",
      "Typescript",
      "Tailwind CSS",
      "Tanstack Query",
      "Zustand"
    ],
    "projectHighlights": [
      {
        "id": 1,
        "highlight": "계획된 소비에 대한 디데이 알림"
      },
      {
        "id": 2,
        "highlight": "패스키 인증을 통한 간편 로그인"
      },
      {
        "id": 3,
        "highlight": "서비스 사용 방법에 대해 물어볼 수 있는 AI 챗봇"
      },
      {
        "id": 4,
        "highlight": "쇼핑몰 URL 크롤링을 통해서 상품 정보를 간단하게 가계부에 등록하는 기능"
      }
    ],
    "functionResponsibles": [
      {
        "id": 1,
        "function": "프론트엔드 구조 설계",
        "detail": [
          "코드 일관성과 유지보수성을 위해 FSD 구조 도입",
          "새로운 기능 추가 시 계층 분리를 명확히 해서 팀원 간 코드 충돌을 최소화"
        ]
      },
      {
        "id": 2,
        "function": "API 클라이언트 설계로 개발 효율성 향상",
        "detail": [
          "반복적인 API 호출 코드를 줄이고 에러 핸들링을 표준화하기 위해 Fetch API 기반의 커스텀 API 클라이언트를 구현",
          "HTTP 요청이 익숙치 않은 팀원들도 쉽게 사용해서 개발 속도 향상"
        ]
      },
      {
        "id": 3,
        "function": "사용자 인증 단계를 다중 모달 플로우로 단계를 직관적으로 볼수 있게 설계",
        "detail": [
          "복잡한 회원가입 과정을 사용자가 쉽게 사용할 수 있도록 단계별 모달 시스템을 설계했습니다.",
          "회원가입 → 개인정보보호 동의 → 비밀번호 생성 등의 과정을 자연스럽게 연결하여 사용자에게 편의성을 제공"
        ]
      },
      {
        "id": 4,
        "function": "WebAuthn API 기반 패스키 인증 구현",
        "detail": [
          "비밀번호 없는 간편 인증 시스템을 구현하기 위해 WebAuthn API를 활용한 패스키 로그인 기능 구현",
          "생체인식(지문, Face ID)을 통해 보안과 편의성 확보"
        ]
      },
      {
        "id": 5,
        "function": "Server Sent Event로 AI 답변 실시간 확인",
        "detail": [
          "AI 챗봇 응답을 실시간으로 타이핑하는 것처럼 표현하기 위해 SSE를 사용",
          "실제 대화하는 듯한 자연스러운 경험을 제공"
        ]
      },
      {
        "id": 6,
        "function": "FCM으로 쇼핑몰 크롤링 결과 및 다양한 알림 구현",
        "detail": [
          "다양한 알림들을 오프라인에서도 받을 수 있도록 Service Worker를 통해 Firebase 기반 푸시 알림을 구현",
          "사용자가 서비스를 사용하지 않는 상황에서도 중요한 정보를 놓치지 않도록 구현"
        ]
      }
    ],
    "functionReasons": [
      {
        "id": 1,
        "function": "WebAuthn API 기반 패스키",
        "reason": "서버에 패스워드를 저장하지 않아 데이터 유출 위험이 없고 생체인식을 통한 간편한 인증이 가능"
      },
      {
        "id": 2,
        "function": "FCM 알림",
        "reason": "Service Worker와의 통합이 잘 되어 있어 오프라인 상황에서도 안정적인 알림 전달이 가능"
      }
    ],
    "error": "Firebase 환경 설정 정보가 Service Worker에서 관리되는데, 민감 정보를 환경변수로 관리하다 보니 빌드 과정에서 필요한 변수들이 Service Worker 파일에 주입되지 않는 문제가 발생했습니다. 이로 인해 푸시 알림 기능이 배포 환경에서 작동하지 않는 문제가 있었습니다.",
    "solved": "빌드 시점에 환경변수를 동적으로 주입하는 별도의 템플릿 파일을 작성하고, 빌드 과정에서 환경변수 파일에서 필요한 값들을 추출하여 Service Worker 파일을 동적으로 생성하도록 개선했습니다.",
    "study": "Service Worker와 같은 Web API를 사용할 때는 일반적인 웹 애플리케이션과 다른 제약사항들이 있다는 것을 깨달았습니다. 특히 환경변수 관리나 빌드 프로세스에서 예상치 못한 문제가 발생할 수 있어, 사전에 충분한 테스트와 대안책 마련이 필요함을 학습했습니다."
  }
}
